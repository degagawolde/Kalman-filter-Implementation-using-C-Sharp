using Emgu.CV;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace KalmanFilter
{
    class TestPrograms
    {
        static public void Main(string[] args)
        {
            Kalman k = new Kalman();
            var g = new double[,]{{-0.812528795297424,-1.76045560730495 },
                                { -0.794204489200786,-1.77412355591002 },
                                 { -0.771497521477891,-1.75479615110921},
                                 { -0.729867728760779,-1.73979901905613},
                                 { -0.711555156956322,-1.72299561249286},
                                 { -0.707671544066063,-1.75827898284637},
                                 { -0.739732049973904,-2.1063528390264},
                                 { -0.73185245575233,-2.04875079110228},
                                 { -0.73185245575233,-2.02889046008328 },
                                 { -0.79461678001002,-2.05288613576782},
                                 { -0.783844673637702,-1.99589229968244},
                                 { -0.765735066389128,-1.86128006091746},
                                 { -0.750439872696243,-1.84398478372752},
                                 { -0.74553547602899,-1.83111678982665},
                                 { -0.731755752508026,-1.81774664127652},
                                 { -0.726149696105731,-1.80760868211768},
                                 { -0.731023635867144,-1.79955498166629},
                                 { -0.740333242785971,-1.78860825788693},
                                 { -0.731466297883828,-1.77298204820764},
                                 { -0.738860440107594,-1.78044375114591},
                                 { -0.735647295768011,-1.7562357564752},
                                { -0.73868059165031,-1.7414670426827},
                                { -0.73963684065711,-1.72934925788632},
                                { -0.751342735085609,-1.73556700563279},
                                { -0.770911944794857,-1.74525380682636},
                                { -0.809454224806073,-1.76182138644593},
                                { -0.798249712207149,-1.76155504751594},
                                { -0.781887867131895,-1.77556124279869},
                                { -0.78106212495353,-1.85240890607048},
                                { -0.767916534089125,-1.83911751145197},
                                { -0.781461606599608,-1.8468855493395}};

            Matrix<double> state = new Matrix<double>(new double[,] {
                        {0},  // x-pos, y-pos, x-velocity, y-velocity
                        {0},
                        {0},
                        {0} });
            Matrix<double> errorCovariancePost = new Matrix<double>(4, 6);
            errorCovariancePost.SetIdentity();

            Matrix<double> data = new Matrix<double>(4, 6);
            List<double> filtered = new List<double>();
            for (int i = 0; i < 32; i++)
            {
                data = new Matrix<double>(new double[,]{
                    {g[i,0]},
                    {g[i,1] } ,
                    {1},
                    {1} });

                k.kalmanf(data, ref state, ref errorCovariancePost);
            }
        }
    }
}
